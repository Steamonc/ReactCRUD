{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer, useEffect, useRef } from 'react';\nimport { reducer } from '../reducer/reducer';\nimport { initTodo } from '../actions/actions';\n/**\n * カスタムフック\n * @params {String} jsonUri\n * @returns {Array} [todos]現在のTODOリスト, [dispatch]actionCreatorをReducerへ渡す関数\n */\n\nexport const useRender = jsonUri => {\n  _s();\n\n  const [todos, dispatch] = useReducer(reducer, []);\n  const isFirstRender = useRef(true);\n  useEffect(() => {\n    const newTodos = {\n      TODOS: [...todos]\n    }; // 初回レンダリング後の処理\n\n    if (isFirstRender.current) {\n      fetch(jsonUri).then(response => {\n        return response.json();\n      }).then(init => {\n        newTodos.TODOS = [init.TODOS];\n        dispatch(initTodo(init.TODOS));\n        isFirstRender.current = false;\n        return;\n      });\n    } // ２回目以降のレンダリング後の処理\n\n\n    fetch(jsonUri, {\n      method: 'PUT',\n      body: JSON.stringify(newTodos),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }, [jsonUri, todos]);\n  return [todos, dispatch];\n};\n\n_s(useRender, \"rD6stHkWZgN7jawsFfONojK3R7g=\");","map":{"version":3,"names":["useReducer","useEffect","useRef","reducer","initTodo","useRender","jsonUri","todos","dispatch","isFirstRender","newTodos","TODOS","current","fetch","then","response","json","init","method","body","JSON","stringify","headers"],"sources":["/Users/steonc/react_drill/crud-todo/src/hooks/render.js"],"sourcesContent":["import {\n    useReducer,\n    useEffect,\n    useRef\n  } from 'react'\n  import { reducer } from '../reducer/reducer'\n  import { initTodo } from '../actions/actions'\n  \n  /**\n   * カスタムフック\n   * @params {String} jsonUri\n   * @returns {Array} [todos]現在のTODOリスト, [dispatch]actionCreatorをReducerへ渡す関数\n   */\n  export const useRender = (jsonUri) => {\n    const [todos, dispatch] = useReducer(reducer, [])\n    const isFirstRender = useRef(true)\n  \n    useEffect(() => {\n      const newTodos = {\n        TODOS: [...todos]\n      }\n  \n      // 初回レンダリング後の処理\n      if (isFirstRender.current) {\n        fetch(jsonUri)\n        .then(response => {\n          return response.json()\n        })\n        .then(init => {\n          newTodos.TODOS = [init.TODOS]\n          dispatch(initTodo(init.TODOS))\n          isFirstRender.current = false\n          return\n        })\n      }\n  \n      // ２回目以降のレンダリング後の処理\n      fetch(jsonUri, {\n        method: 'PUT',\n        body: JSON.stringify(newTodos),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n    }, [jsonUri, todos])\n  \n    return [todos, dispatch]\n  }"],"mappings":";;AAAA,SACIA,UADJ,EAEIC,SAFJ,EAGIC,MAHJ,QAIS,OAJT;AAKE,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAEA;AACF;AACA;AACA;AACA;;AACE,OAAO,MAAMC,SAAS,GAAIC,OAAD,IAAa;EAAA;;EACpC,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,UAAU,CAACG,OAAD,EAAU,EAAV,CAApC;EACA,MAAMM,aAAa,GAAGP,MAAM,CAAC,IAAD,CAA5B;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMS,QAAQ,GAAG;MACfC,KAAK,EAAE,CAAC,GAAGJ,KAAJ;IADQ,CAAjB,CADc,CAKd;;IACA,IAAIE,aAAa,CAACG,OAAlB,EAA2B;MACzBC,KAAK,CAACP,OAAD,CAAL,CACCQ,IADD,CACMC,QAAQ,IAAI;QAChB,OAAOA,QAAQ,CAACC,IAAT,EAAP;MACD,CAHD,EAICF,IAJD,CAIMG,IAAI,IAAI;QACZP,QAAQ,CAACC,KAAT,GAAiB,CAACM,IAAI,CAACN,KAAN,CAAjB;QACAH,QAAQ,CAACJ,QAAQ,CAACa,IAAI,CAACN,KAAN,CAAT,CAAR;QACAF,aAAa,CAACG,OAAd,GAAwB,KAAxB;QACA;MACD,CATD;IAUD,CAjBa,CAmBd;;;IACAC,KAAK,CAACP,OAAD,EAAU;MACbY,MAAM,EAAE,KADK;MAEbC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,QAAf,CAFO;MAGbY,OAAO,EAAE;QACP,gBAAgB;MADT;IAHI,CAAV,CAAL;EAOD,CA3BQ,EA2BN,CAAChB,OAAD,EAAUC,KAAV,CA3BM,CAAT;EA6BA,OAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACD,CAlCM;;GAAMH,S"},"metadata":{},"sourceType":"module"}